<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Cardinal Courses</title>
    
  <link rel="stylesheet" type="text/css" href="wesmap.css">
  <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.0/jquery.min.js"></script>
    
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    <script src="./build/bootstrap-rating-input.min.js" type="text/javascript"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.18/vue.min.js"></script>
  
  
</head>
    
<body>

    <!--TODO:
      - up vote & down vote for posts, auto-delete if down votes more than n
      - improve review box design
      - improve design (too much centering?)
    -->
 
  <div id="search">      
    <h1>CARDINAL COURSE</h1>
    <br>
    <div class="container">    
    <div class="input-group">
      <input type="text" class="form-control" id="name-dep-input" placeholder="Enter department abbreviation (e.g. comp, rees, russ, hist)">
      <span class="input-group-btn">
        <button class="btn btn-default" type="button" href="" id="search-btn">Search</button>
      </span>
    </div>
    </div>
  <br>
  <div class="container">
  <div id="accordion" role="tablist" aria-multiselectable="true">
      <ul id="course-list" class="list-group">
      </ul>
      
  </div>
  </div>
    </div>
    
  <script>
    $("#name-dep-input").keyup(function(event){
        if(event.keyCode == 13){
            $("#search-btn").click();
        }
    });
      
      
    $(window).on('load', function(e) {
        $('#name-dep-input')[0].value = '';
    });

    $('#search-btn').on('click', function(e) {
        e.preventDefault();
        var searchQuery = $('#name-dep-input')[0].value;
        $('#name-dep-input')[0].value = '';
        if (searchQuery === '') return;
        $.ajax({
            url: '/search',
            data: {
                searchQuery: searchQuery
            }
        }).done(function(res) {
            if (res.length === 0) {
                $('#course-list').html(`
                    <h3 class="text-center"> No matches were found </h3>
                    <h5 class="text-center"> Enter department abbreviation (e.g. comp, math, rees, hist, etc.) </h5>
                `);
                return;
            };
            document.getElementById('course-list').innerHTML =
                res.map((course,index) => {
                    // find average rating and display that many stars
                    var ratingValue = res[index].rating.stars == 0 ? 0 : Math.round(res[index].rating.stars / res[index].rating.totalVote)
                    
                    var coursesRated = JSON.parse(localStorage.getItem('coursesRated'))
                    /*
                        check if user has rated
                        if so, make the star rating read-only
                    */
                    var rated = $.inArray(course.name, coursesRated)
                    var starInput = rated == -1 ?
                      `<input type="number" id="${index}rating" class="rating" value="${ratingValue}" />` :
                      `<input type="number" id="${index}rating" class="rating" value="${ratingValue}" data-readonly/>`
                    var coursesReviewed = JSON.parse(localStorage.getItem('coursesReviewed'))
                    var reviewed = $.inArray(course.name, coursesReviewed)
                    var addReview =
                        reviewed == -1 ?
                            `<textarea class="form-control" id="${index}review-txt" rows="3" placeholder="Add your review"></textarea>
                        <input class="form-control" type="text" placeholder="Name" id="${index}postBy" style='display: inline; width: 30%;'>
                        <input class="form-control" type="text" placeholder="Professor" id="${index}prof" style='display: inline; width: 29%;'>
                        <input class="form-control" type="text" placeholder="Semester (e.g. spring 2017)" id="${index}sem" style='display: inline; width: 20%;'>
                        <input class="form-control" type="text" placeholder="Grade (optional)" id="${index}grade" style='display: inline; width: 13%;'>
                        <button type="submit" class="btn btn-primary" id="${index}submit-btn">Submit</button>
                        <p id="${index}missingField"></p>`
                            :
                            `Thanks for your review!`
                    if(course.reviews.length == 0) {
                        var content =
                            `<li class="list-group-item">
                                <h4>No reviews</h4>
                                <p>Add yours below!</p>
                              </li>`
                    } else {
                        var content =
                            course.reviews.map(function(entry,indexReview) {
                              return `
                                      <li class="list-group-item">
                                        <div id="reviews">
                                        <h4>"${entry.review}"</h4>
                                        <div id="poster">
                                        <p><b>Posted by</b>: ${entry.postBy}
                                        | <b>Instructor</b>: ${entry.prof}
                                        | <b>Semester</b>: ${entry.sem}
                                        | <b>Grade received</b>: ${entry.grade}</p>
                                        </div>
                                        <span onclick="upvote(\'${course.name}\',${indexReview},${index})"><i class="fa fa-thumbs-up id="upvote"></i></span> &emsp;
                                        <span id="${indexReview}reviewVote${index}">${entry.vote}</span>
                                        &emsp;
                                        <span onclick="downvote(\'${course.name}\',${indexReview},${index})"><i class="fa fa-thumbs-down" id="downvote"></i></span>
                                        </div>
                                        
                                      </li>
                                    `}).join('')
                    }
                    return `
                        <div class="card">
                            <div class="card-header" role="tab">
                              <h3 class="mb-0">
                                <a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#${index}" aria-expanded="false" aria-controls="collapseOne">
                                  ${course.name}
                                </a>
                              </h3>
                            <div id="${index}ratingDiv">`+ starInput + `</div>
                            </div>

                            <div id="${index}" class="collapse" role="tabpanel">
                              <div class="card-block review-list" id="${index}review-list">
                        ` + content +
                        `
                              </div>
                        <li class="list-group-item" id="${index}addReview">
                        ` + addReview +    
                       `</li>
                            </div>
                        </div>`
                }).join('');
            $('input.rating').rating({
                clearable: false
            });
            
            /*
                if a new review is added, contact server to update database
            */
            res.map((course,index) => {
                var rating;
                $('#' + index + 'rating').change(function() {
                    rating = $('#' + index + 'rating').val();
                    
                    /*
                    - update new rating with server
                    - response from server is the updated entry
                    - use that updated entry to display updated rating
                    */
                    fetch('rate', {
                          method: 'put',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({
                              name : res[index].name,
                              stars: rating
                          })
                      }).then (resp => {
                        resp.json().then(data => {
                            var ave = Math.round(data.value.rating.stars / data.value.rating.totalVote)
                            document.getElementById(index + 'ratingDiv').innerHTML = `<input type="number" id="${index}rating" class="rating" value="${ave}" data-readonly />`
                            $('input.rating').rating({
                                clearable: false
                            });
                            /*
                                use local storage to store ratings; prevent user from rating again
                            */
                            var items = JSON.parse(localStorage.getItem('coursesRated')) || [];
                            items.push(res[index].name);
                            localStorage.setItem('coursesRated', JSON.stringify(items))
                        })
                        
                    })
                    
                    
                })
                $('#' + index + 'submit-btn').on('click', function(e) {
                    e.preventDefault();
                    var review = $('#' + index + 'review-txt').val()
                    var postBy = $('#' + index + 'postBy').val()
                    var prof = $('#' + index + 'prof').val()
                    var sem = $('#' + index + 'sem').val()
                    var grade = $('#' + index + 'grade').val() == "" ? "-" : $('#' + index + 'grade').val();
                    if (postBy.trim() !== "" &&
                        review.trim() !== "" &&
                        prof.trim() !== "" &&
                        sem.trim() !== "") {
                      $('#' + index + 'review-txt').val('')
                      $('#' + index + 'postBy').val('')
                      $('#' + index + 'prof').val('')
                      $('#' + index + 'sem').val('')
                      $('#' + index + 'grade').val('')
                      fetch('add', {
                          method: 'put',
                          headers: {'Content-Type': 'application/json'},
                          body: JSON.stringify({
                              name : res[index].name,
                              postBy: postBy,
                              prof: prof,
                              review : review,
                              sem: sem,
                              grade: grade
                          })
                      }).then(resp => {
                          var indexReview = course.reviews.length
                          document.getElementById(index + 'addReview').innerHTML = "Thanks for your review!"
                          $('#missingField').val('');
                          $('#' + index + 'review-list').append(`
                                <li class="list-group-item">
                                        <div id="reviews">
                                        <h4>"${review}"</h4>
                                        <div id="poster">
                                        <p><b>Posted by</b>: ${postBy}
                                        | <b>Instructor</b>: ${prof}
                                        | <b>Semester</b>: ${sem}
                                        | <b>Grade received</b>: ${grade}</p>
                                        </div>
                                        <span onclick="upvote(\'${course.name}\',${indexReview},${index})"><i class="fa fa-thumbs-up id="upvote"></i></span> &emsp;
                                        <span id="${indexReview}reviewVote${index}">0</span>
                                        &emsp;
                                        <span onclick="downvote(\'${course.name}\',${indexReview},${index})"><i class="fa fa-thumbs-down" id="downvote"></i></span>
                                        </div>
                                </li>
                          `);
                           /*
                                use local storage to store reviewed courses
                           */
                           var items = JSON.parse(localStorage.getItem('coursesReviewed')) || [];
                           items.push(res[index].name);
                           localStorage.setItem('coursesReviewed', JSON.stringify(items))
                          if (resp.ok) return resp.json();
                      })
                    } else {
                        document.getElementById(index + 'missingField').innerHTML = "missing required field(s)"
                    }
                });
            });
        })
        });
      
      var upDownVotesItems = JSON.parse(localStorage.getItem('upDownVotes')) || [];
      
      function findAndRemove(array, property, value) {
          array.forEach(function(result, index) {
              if(result[property] === value) {
              //Remove from array
              array.splice(index, 1);
              }    
          });
          return array
      }
      
      function upvote(coursename,indexReview,index) {
          var mustVote = function() {
              if (upDownVotesItems.length == 0) {
                  upDownVotesItems.push({
                      course: coursename + indexReview,
                      vote: "down"
                  })
                  localStorage.setItem('upDownVotes', JSON.stringify(upDownVotesItems));
                  return "up"
              } else {
                  var courseItem = $.grep(upDownVotesItems, function (item) {
                      return item.course == coursename + indexReview;
                  });
                  
                  if(courseItem.length == 0) {
                      upDownVotesItems.push({
                          course: coursename + indexReview,
                          vote: "down"
                      })
                      localStorage.setItem('upDownVotes', JSON.stringify(upDownVotesItems));
                      return "up"
                  }
                  if(courseItem[0].vote == "down") {
                      return "down"
                  } else if (courseItem[0].vote == "up") {
                      var newUpDownVotesItems = findAndRemove(upDownVotesItems, "course", coursename+indexReview)
                      newUpDownVotesItems.push({
                          course: coursename + indexReview,
                          vote: "down"
                      })
                      localStorage.setItem('upDownVotes', JSON.stringify(newUpDownVotesItems));
                      return "up"
                  }
              }
          }()
          
          if (mustVote == "down") {
              return;
          }

          fetch('upvote', {
                method: 'put',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    name : coursename,
                    index: indexReview
                })
            }).then (resp => {
                resp.json().then(data => {
                    var newVote = JSON.parse(data.value.reviews[indexReview].vote)
                    document.getElementById(indexReview + 'reviewVote' + index).innerHTML = newVote
                })

            })
      }
      
      
      function downvote(coursename,indexReview,index) {
          var mustVote = function() {
              if (upDownVotesItems.length == 0) {
                  upDownVotesItems.push({
                      course: coursename + indexReview,
                      vote: "up"
                  })
                  localStorage.setItem('upDownVotes', JSON.stringify(upDownVotesItems));
                  return "down"
              } else {
                  var courseItem = $.grep(upDownVotesItems, function (item) {
                      return item.course == coursename + indexReview;
                  });
                  
                  if(courseItem.length == 0) {
                      upDownVotesItems.push({
                          course: coursename + indexReview,
                          vote: "up"
                      })
                      localStorage.setItem('upDownVotes', JSON.stringify(upDownVotesItems));
                      return "down"
                  }
                  if(courseItem[0].vote == "up") {
                      return "up"
                  } else if (courseItem[0].vote == "down") {
                      var newUpDownVotesItems = findAndRemove(upDownVotesItems, "course", coursename+indexReview)
                      newUpDownVotesItems.push({
                          course: coursename + indexReview,
                          vote: "up"
                      })
                      localStorage.setItem('upDownVotes', JSON.stringify(newUpDownVotesItems));
                      return "down"
                  }
              }
          }()
          
          if (mustVote == "up") {
              return;
          }
          
          fetch('downvote', {
                method: 'put',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    name : coursename,
                    index: indexReview
                })
            }).then (resp => {
                resp.json().then(data => {
                    var newVote = JSON.parse(data.value.reviews[indexReview].vote)
                    document.getElementById(indexReview + 'reviewVote' + index).innerHTML = newVote
                })

            })
      }
      
  </script>

</body>
</html>
